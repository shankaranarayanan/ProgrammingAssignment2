?solve
solve(matrix(1:4,2,2))
squareMatrix <- matrix(1:4,2,2)
squareMatrix
inverseMatrix <- solve(squareMatrix)
inverseMatrix
solve(squareMatrix, inverseMatrix)
solve( inverseMatrix, squareMatrix)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
specialVector <- makeVector()
specialVector
specialVector$get()
specialVector$set(c(1,2,3))
specialVector$get()
specialVector$getmean()
specialVector$setmean(2)
specialVector$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean
cachemean()
cachemean(c(1,2,3))
cachemean(specialVector)
history
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
#It provides four functions- create matrix, retrieve matrix,
# create inverse of matrix and retrieve inverse of matrix.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
setMatrix <- function(y) {
x <<- y
inv <<- NULL
}
getMatrix <- function() x
setInvMatrix <- function(z) inv <<- z
getInvMatrix <- function() inv
list(setMatrix = setMatrix, getMatrix = getMatrix ,
setInvMatrix = setInvMatrix, getInvMatrix = getInvMatrix)
}
## Write a short comment describing this function
# It provides inverse of a matrix. The inversion is looked up in the cache,
# If there is no data in the cache, it is computed, put into the cache and returned.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInvMatrix()
if(!is.null(invMatrix)) {
print("Obtained the inverse of matrix from cache")
return(invMatrix)
}
data <- x$getMatrix()
invMatrix <- solve(data)
x$setInvMatrix(invMatrix)
invMatrix
}
specialMatrix <- makeCacheMatrix()
specialMatrix
specialMatrix$getMatrix()
specialMatrix$setMatrix(matrix(1:4,2,2))
specialMatrix$getMatrix()
specialMatrix$getInvMatrix()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
#It provides four functions- create matrix, retrieve matrix,
# create inverse of matrix and retrieve inverse of matrix.
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
setMatrix <- function(y) {
x <<- y
inv <<- matrix()
}
getMatrix <- function() x
setInvMatrix <- function(z) inv <<- z
getInvMatrix <- function() inv
list(setMatrix = setMatrix, getMatrix = getMatrix ,
setInvMatrix = setInvMatrix, getInvMatrix = getInvMatrix)
}
## Write a short comment describing this function
# It provides inverse of a matrix. The inversion is looked up in the cache,
# If there is no data in the cache, it is computed, put into the cache and returned.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInvMatrix()
if(!is.null(invMatrix)) {
print("Obtained the inverse of matrix from cache")
return(invMatrix)
}
data <- x$getMatrix()
invMatrix <- solve(data)
x$setInvMatrix(invMatrix)
invMatrix
}
specialMatrix <- makeCacheMatrix()
specialMatrix$getMatrix()
specialMatrix$getInvMatrix()
specialMatrix$setMatrix(matrix(1:4,2,2))
specialMatrix$getMatrix()
specialMatrix$getInvMatrix()
cacheSolve(specialMatrix)
length(specialMatrix$getMatrix())
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
#It provides four functions- create matrix, retrieve matrix,
# create inverse of matrix and retrieve inverse of matrix.
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
setMatrix <- function(y) {
x <<- y
inv <<- matrix()
}
getMatrix <- function() x
setInvMatrix <- function(z) inv <<- z
getInvMatrix <- function() inv
list(setMatrix = setMatrix, getMatrix = getMatrix ,
setInvMatrix = setInvMatrix, getInvMatrix = getInvMatrix)
}
## Write a short comment describing this function
# It provides inverse of a matrix. The inversion is looked up in the cache,
# If there is no data in the cache, it is computed, put into the cache and returned.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInvMatrix()
if(length(invMatrix) > 0) {
print("Obtained the inverse of matrix from cache")
return(invMatrix)
}
data <- x$getMatrix()
invMatrix <- solve(data)
x$setInvMatrix(invMatrix)
invMatrix
}
specialMatrix <- makeCacheMatrix()
specialMatrix$getMatrix
specialMatrix$getMatrix()
specialMatrix$getInvMatrix()
specialMatrix$setMatrix(matrix(1:4,2,2))
specialMatrix$getInvMatrix()
specialMatrix$getInvMatrix()
specialMatrix$getMatrix()
cacheSolve(specialMatrix)
length(specialMatrix$getInvMatrix())
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
#It provides four functions- create matrix, retrieve matrix,
# create inverse of matrix and retrieve inverse of matrix.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
setMatrix <- function(y) {
x <<- y
inv <<- NULL
}
getMatrix <- function() x
setInvMatrix <- function(z) inv <<- z
getInvMatrix <- function() inv
list(setMatrix = setMatrix, getMatrix = getMatrix ,
setInvMatrix = setInvMatrix, getInvMatrix = getInvMatrix)
}
## Write a short comment describing this function
# It provides inverse of a matrix. The inversion is looked up in the cache,
# If there is no data in the cache, it is computed, put into the cache and returned.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInvMatrix()
if(!is.null(invMatrix)) {
print("Obtained the inverse of matrix from cache")
return(invMatrix)
}
data <- x$getMatrix()
invMatrix <- solve(data)
x$setInvMatrix(invMatrix)
invMatrix
}
specialMatrix <- makeCacheMatrix()
specialMatrix$getMatrix
specialMatrix$getMatrix()
specialMatrix$getInvMatrix()
specialMatrix$setMatrix(matrix(1:4,2,2))
specialMatrix$getInvMatrix()
specialMatrix$getMatrix()
cacheSolve(specialMatrix)
cacheSolve(specialMatrix)
cacheSolve(specialMatrix)
specialMatrix$setMatrix(5:8,2,2)
specialMatrix$setMatrix(matrix(5:8,2,2))
specialMatrix$getMatrix()
specialMatrix$getInvMatrix()
cacheSolve(specialMatrix)
cacheSolve(specialMatrix)
